logging:
  level:
    com:
      microservicesbank:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
    #console: "${LOGGER_PATTERN:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}}"

server:
  port: 8080
spring:
  application:
    name: accounts
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true #to enable circuit breaker for all feign clients inside accounts microservice
# LOCAL DEPLOY
#  datasource:
#    url: jdbc:h2:mem:testdb
#    driverClassName: org.h2.Driver
#    username: sa
#    password: ''
#  h2:
#    console:
#      enabled: true
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect
#    hibernate:
#      ddl-auto: update
#    show-sql: true

# PRODUCTION(DOCKER) DEPLOY
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
  jpa:
    show-sql: true
  sql:
    init:
      mode: always
#
#
#
  config:
    import: optional:configserver:http://localhost:8071/

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  info:
    env:
      enabled: true #to enable info details for an actuator
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true #register with ip address but not with hostname because there is not any DNS mappings provided
  client:
    fetchRegistry: true #fetch registered services
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 #how many requests should be monitored to change state from closed to open
      permittedNumberOfCallsInHalfOpenState: 2 #number of calls allowed in half open state
      failureRateThreshold: 50 #percentage of failures to check out from closed state to the open one
      waitDurationInOpenState: 10000 #how long should we wait in open state before changing to half open (10000 = 10 seconds)

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500 #longer that default circuit breaker wait duration so won't work without Customizer<ReactiveResilience4JCircuitBreakerFactory> in Gateway server
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
#      ignoreExceptions:
#        - java.lang.NullPointerException #ignore retries for null pointer exception, just return fallback instantly
#      retryExceptions: #when retryExceptions is mentioned - all other exceptions will be ignored so there is no need to mention ignoreExceptions in that case
#        - java.util.concurrent.TimeoutException #retry for timeout exception
    #getContactDetails:  to add individual retry config for certain method

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000 #time to wait for a token before giving up
      limitRefreshPeriod: 5000 #period to refresh tokens
      limitForPeriod: 1 #how many tokens should be available in a period
#so there is 1 token available in 5 seconds and then it will be refreshed

info:
  app:
    name: accounts
    description: Microservicesbank Accounts microservice
    version: 9